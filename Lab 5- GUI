
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.NumberFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.lang.Object;
import java.awt.print.Printable;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Class 		           
* File  		           
* Description 	      
* @author             Caitlin McMurchie
* Environment 	      PC, Windows 10, jdk1.8.0_151, NetBeans 8.2
* Date 			           
* @version            1.0
* @see                javax.swing.JOptionPane
* History Log 	
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class DentalGUI extends javax.swing.JFrame 
{
    //class leval instance variables
    String PatientsFile = "\\\\zeus\\profile$\\955331307\\My Documents\\CS 141\\DentalApplication\\src\\PatientNames.txt";
    String InvioceFile = "\\\\zeus\\profile$\\955331307\\My Documents\\CS 141\\DentalApplication\\src\\Invioce.txt";
    String ImageFile = "\\\\zeus\\profile$\\955331307\\My Documents\\CS 141\\DentalApplication\\src\\Parrot.jpg";
    NumberFormat dollars = NumberFormat.getCurrencyInstance();
    StringBuffer display = new StringBuffer("");
    double historyTotal = 0.0;      //Total bills

    /**
     * Default Constructor -- Creates new form DetalGUI
     */
    public DentalGUI() {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(ImageFile));
        this.getRootPane().setDefaultButton(CalculateJButton);
        setLocationRelativeTo(null);
        readPatients(PatientsFile); 
    }
    public void readPatients(String file)
    {
        String inputLine, patientName;
        try
        {
            PatientJComboBox.removeAllItems();
            FileReader freader = new FileReader(file);
            BufferedReader inputFile = new BufferedReader(freader);
            //Alternativly, use scanner class for easier reading
            inputLine = inputFile.readLine();
            
            while (inputLine != null)
            {
                PatientJComboBox.addItem(inputLine);
                inputLine = inputFile.readLine();
            }
        inputFile.close();
        }
        catch(IOException exp)
        {
            exp.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        PatientJPanel = new javax.swing.JPanel();
        PatientJLabel = new javax.swing.JLabel();
        PatientJComboBox = new javax.swing.JComboBox<>();
        ServicesJPanel = new javax.swing.JPanel();
        CleaningJCheckBox = new javax.swing.JCheckBox();
        CleaningJLabel = new javax.swing.JLabel();
        CavityJCheckBox = new javax.swing.JCheckBox();
        CavityJLabel = new javax.swing.JLabel();
        XRayJCheckBox = new javax.swing.JCheckBox();
        XRayLabel = new javax.swing.JLabel();
        FlourideJCheckBox = new javax.swing.JCheckBox();
        FlourideJLabel = new javax.swing.JLabel();
        RootCanalJCheckBox = new javax.swing.JCheckBox();
        RootCanalJLabel = new javax.swing.JLabel();
        OtherJCheckBox = new javax.swing.JCheckBox();
        OtherJTextField = new javax.swing.JTextField();
        TotalJLabel = new javax.swing.JLabel();
        TotalJTextField = new javax.swing.JTextField();
        ButtonsJPanel = new javax.swing.JPanel();
        CalculateJButton = new javax.swing.JButton();
        SaveJButton = new javax.swing.JButton();
        ClearJButton = new javax.swing.JButton();
        QuitJButton = new javax.swing.JButton();
        InvoiceJPanel = new javax.swing.JPanel();
        InvoiceScrollPane = new javax.swing.JScrollPane();
        InvioceJTextArea = new javax.swing.JTextArea();
        DentalJMenuBar = new javax.swing.JMenuBar();
        FileJMenu = new javax.swing.JMenu();
        ClearJMenuItem = new javax.swing.JMenuItem();
        PrintInvioceJMenuItem = new javax.swing.JMenuItem();
        PrintJMenuItem = new javax.swing.JMenuItem();
        ExitJMenuItem = new javax.swing.JMenuItem();
        HelpJMenu = new javax.swing.JMenu();
        AboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dental Services");
        setResizable(false);

        PatientJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 0, 14))); // NOI18N

        PatientJLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PatientJLabel.setText("Patient Name: ");

        PatientJComboBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout PatientJPanelLayout = new javax.swing.GroupLayout(PatientJPanel);
        PatientJPanel.setLayout(PatientJPanelLayout);
        PatientJPanelLayout.setHorizontalGroup(
            PatientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PatientJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addComponent(PatientJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PatientJPanelLayout.setVerticalGroup(
            PatientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PatientJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PatientJLabel)
                    .addComponent(PatientJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(PatientJPanel, java.awt.BorderLayout.NORTH);

        ServicesJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Services:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 0, 14))); // NOI18N
        ServicesJPanel.setLayout(new java.awt.GridLayout(7, 2, 3, 3));

        CleaningJCheckBox.setMnemonic('e');
        CleaningJCheckBox.setSelected(true);
        CleaningJCheckBox.setText("Cleaning");
        ServicesJPanel.add(CleaningJCheckBox);

        CleaningJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CleaningJLabel.setText("$35");
        ServicesJPanel.add(CleaningJLabel);

        CavityJCheckBox.setMnemonic('v');
        CavityJCheckBox.setText("Cavity");
        ServicesJPanel.add(CavityJCheckBox);

        CavityJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        CavityJLabel.setText("$150");
        ServicesJPanel.add(CavityJLabel);

        XRayJCheckBox.setMnemonic('x');
        XRayJCheckBox.setText("X-Ray");
        ServicesJPanel.add(XRayJCheckBox);

        XRayLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        XRayLabel.setText("$85");
        ServicesJPanel.add(XRayLabel);

        FlourideJCheckBox.setMnemonic('u');
        FlourideJCheckBox.setText("Flouride");
        ServicesJPanel.add(FlourideJCheckBox);

        FlourideJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FlourideJLabel.setText("$50");
        ServicesJPanel.add(FlourideJLabel);

        RootCanalJCheckBox.setText("Root Canal");
        ServicesJPanel.add(RootCanalJCheckBox);

        RootCanalJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        RootCanalJLabel.setText("$225");
        ServicesJPanel.add(RootCanalJLabel);

        OtherJCheckBox.setMnemonic('o');
        OtherJCheckBox.setText("Other");
        OtherJCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OtherJCheckBoxActionPerformed(evt);
            }
        });
        ServicesJPanel.add(OtherJCheckBox);

        OtherJTextField.setEditable(false);
        OtherJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ServicesJPanel.add(OtherJTextField);

        TotalJLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        TotalJLabel.setText("Total:");
        ServicesJPanel.add(TotalJLabel);

        TotalJTextField.setEditable(false);
        TotalJTextField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        TotalJTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ServicesJPanel.add(TotalJTextField);

        getContentPane().add(ServicesJPanel, java.awt.BorderLayout.WEST);

        ButtonsJPanel.setLayout(new java.awt.GridLayout(2, 2, 1, 1));

        CalculateJButton.setBackground(new java.awt.Color(0, 153, 153));
        CalculateJButton.setMnemonic('a');
        CalculateJButton.setText("Calculate");
        CalculateJButton.setBorder(null);
        CalculateJButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CalculateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateJButtonActionPerformed(evt);
            }
        });
        ButtonsJPanel.add(CalculateJButton);

        SaveJButton.setBackground(new java.awt.Color(0, 153, 153));
        SaveJButton.setMnemonic('s');
        SaveJButton.setText("Save");
        SaveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveJButtonActionPerformed(evt);
            }
        });
        ButtonsJPanel.add(SaveJButton);

        ClearJButton.setBackground(new java.awt.Color(0, 153, 153));
        ClearJButton.setMnemonic('l');
        ClearJButton.setText("Clear");
        ButtonsJPanel.add(ClearJButton);

        QuitJButton.setBackground(new java.awt.Color(0, 153, 153));
        QuitJButton.setMnemonic('q');
        QuitJButton.setText("Quit");
        QuitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitJButtonActionPerformed(evt);
            }
        });
        ButtonsJPanel.add(QuitJButton);

        getContentPane().add(ButtonsJPanel, java.awt.BorderLayout.SOUTH);

        InvoiceJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invioce:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bookman Old Style", 0, 14))); // NOI18N

        InvioceJTextArea.setEditable(false);
        InvioceJTextArea.setBackground(new java.awt.Color(204, 204, 204));
        InvioceJTextArea.setColumns(20);
        InvioceJTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        InvioceJTextArea.setRows(5);
        InvoiceScrollPane.setViewportView(InvioceJTextArea);

        javax.swing.GroupLayout InvoiceJPanelLayout = new javax.swing.GroupLayout(InvoiceJPanel);
        InvoiceJPanel.setLayout(InvoiceJPanelLayout);
        InvoiceJPanelLayout.setHorizontalGroup(
            InvoiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
            .addGroup(InvoiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(InvoiceScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
        );
        InvoiceJPanelLayout.setVerticalGroup(
            InvoiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 179, Short.MAX_VALUE)
            .addGroup(InvoiceJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(InvoiceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
        );

        getContentPane().add(InvoiceJPanel, java.awt.BorderLayout.CENTER);

        FileJMenu.setMnemonic('f');
        FileJMenu.setText("File");
        FileJMenu.setToolTipText("Prints the GUI");

        ClearJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        ClearJMenuItem.setText("Clear");
        ClearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(ClearJMenuItem);

        PrintInvioceJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        PrintInvioceJMenuItem.setText("Print Invioce");
        PrintInvioceJMenuItem.setToolTipText("Print invioce, JText area");
        PrintInvioceJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintInvioceJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(PrintInvioceJMenuItem);

        PrintJMenuItem.setMnemonic('p');
        PrintJMenuItem.setText("Print Form");
        PrintJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintJMenuItemActionPerformed(evt);
            }
        });
        FileJMenu.add(PrintJMenuItem);

        ExitJMenuItem.setMnemonic('x');
        ExitJMenuItem.setText("Exit");
        FileJMenu.add(ExitJMenuItem);

        DentalJMenuBar.add(FileJMenu);

        HelpJMenu.setMnemonic('h');
        HelpJMenu.setText("Help");

        AboutJMenuItem.setMnemonic('a');
        AboutJMenuItem.setText("About");
        HelpJMenu.add(AboutJMenuItem);

        DentalJMenuBar.add(HelpJMenu);

        setJMenuBar(DentalJMenuBar);

        pack();
    }// </editor-fold>                        

    private void ClearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void QuitJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // ends the application
        System.exit(0);
    }                                           

    private void OtherJCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // 
        if (OtherJCheckBox.isSelected())
        {
            OtherJTextField.setEditable(true);
            OtherJTextField.requestFocus();
        }
        else
        {
            OtherJTextField.setText("");
            OtherJTextField.setEditable(false);    
        }
    }                                              

    //JAVADOCS
    private void CalculateJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 

        final double MAX_OTHER = 10000000.0;    //max fee for other services
        double total;
        String message = "Please enter a name and check at least one item";
        Object patient = PatientJComboBox.getSelectedItem(); //gets patient name
        
        if ( ( patient == null) ||
                    ( !CleaningJCheckBox.isSelected() &&
                    !CavityJCheckBox.isSelected() &&
                    !XRayJCheckBox.isSelected() &&
                    !FlourideJCheckBox.isSelected() &&
                    !RootCanalJCheckBox.isSelected() &&
                    !OtherJCheckBox.isSelected() )
                )
        {
            JOptionPane.showMessageDialog( null, message, "Missing Information"
                    + "(No patient selected  or no operations selected)",
                    JOptionPane.WARNING_MESSAGE );   
        }
        else
        {
            try
            {
                message = "Illeagal type--must be a positive number";
                double OtherAmount = OtherJCheckBox.isSelected()?
                        Double.parseDouble(OtherJTextField.getText()):0.0;
                if(OtherJCheckBox.isSelected() && (OtherAmount <= 0.0 ||
                        OtherAmount > MAX_OTHER))
                {
                    message = "Illegal range -- please enter a positive "
                            + "less than" + dollars.format(MAX_OTHER);
                    throw new NumberFormatException();
                }
                DentalBill myBill = new DentalBill(patient.toString(), 
                        CleaningJCheckBox.isSelected(),
                        CavityJCheckBox.isSelected(), 
                        XRayJCheckBox.isSelected(),
                        FlourideJCheckBox.isSelected(), 
                        RootCanalJCheckBox.isSelected(),
                        OtherJCheckBox.isSelected(), 
                        OtherAmount); 
                total = myBill.calculateDentalBill();
                TotalJTextField.setText(dollars. format(total));
                display.delete(0, display.length());
                display = myBill.displayBill();
                InvioceJTextArea.setText(display.toString());
                
 
            }
            catch(NumberFormatException nume)
            {
                JOptionPane.showMessageDialog( null, message, "Invalid Data",
                    JOptionPane.WARNING_MESSAGE );
                OtherJTextField.requestFocus();
            }
        }
    }                                                

    private void SaveJButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        try
        {
            FileWriter fwrighter = new FileWriter(InvioceFile, false);
            PrintWriter outputFile = new PrintWriter(fwrighter);
            
            outputFile.println(display.toString());
            outputFile.close();
        }
        catch (IOException ex)
        {
            JOptionPane.showMessageDialog(null, "File not saved", "File Write "
                    + "Error", JOptionPane.WARNING_MESSAGE);

        }
                
    }                                           

    private void PrintInvioceJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        try {
            // Print content of the JTextArea
            InvioceJTextArea.print();
        } catch (PrinterException ex) {
            Logger.getLogger(DentalGUI.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
        
    }                                                     

    private void PrintJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // Call Print Utilites class
        PrintUtilities.printComponent(this);
    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DentalGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem AboutJMenuItem;
    private javax.swing.JPanel ButtonsJPanel;
    private javax.swing.JButton CalculateJButton;
    private javax.swing.JCheckBox CavityJCheckBox;
    private javax.swing.JLabel CavityJLabel;
    private javax.swing.JCheckBox CleaningJCheckBox;
    private javax.swing.JLabel CleaningJLabel;
    private javax.swing.JButton ClearJButton;
    private javax.swing.JMenuItem ClearJMenuItem;
    private javax.swing.JMenuBar DentalJMenuBar;
    private javax.swing.JMenuItem ExitJMenuItem;
    private javax.swing.JMenu FileJMenu;
    private javax.swing.JCheckBox FlourideJCheckBox;
    private javax.swing.JLabel FlourideJLabel;
    private javax.swing.JMenu HelpJMenu;
    private javax.swing.JTextArea InvioceJTextArea;
    private javax.swing.JPanel InvoiceJPanel;
    private javax.swing.JScrollPane InvoiceScrollPane;
    private javax.swing.JCheckBox OtherJCheckBox;
    private javax.swing.JTextField OtherJTextField;
    private javax.swing.JComboBox<String> PatientJComboBox;
    private javax.swing.JLabel PatientJLabel;
    private javax.swing.JPanel PatientJPanel;
    private javax.swing.JMenuItem PrintInvioceJMenuItem;
    private javax.swing.JMenuItem PrintJMenuItem;
    private javax.swing.JButton QuitJButton;
    private javax.swing.JCheckBox RootCanalJCheckBox;
    private javax.swing.JLabel RootCanalJLabel;
    private javax.swing.JButton SaveJButton;
    private javax.swing.JPanel ServicesJPanel;
    private javax.swing.JLabel TotalJLabel;
    private javax.swing.JTextField TotalJTextField;
    private javax.swing.JCheckBox XRayJCheckBox;
    private javax.swing.JLabel XRayLabel;
    // End of variables declaration                   
}
